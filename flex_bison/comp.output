Grammar

    0 $accept: program $end

    1 program: funcdec

    2 funcdec: FN IDENTIFIER OPEN_PAR TYPE IDENTIFIER CLOSE_PAR funcbody
    3        | ε

    4 funcbody: OPEN_BRACKET statement RETURN expression CLOSE_BRACKET
    5         | OPEN_BRACKET statement CLOSE_BRACKET

    6 statement: vardec
    7          | funcdec
    8          | funccall
    9          | assignment
   10          | block
   11          | while
   12          | if
   13          | print SEMICOLON

   14 relexpression: expression ISEQUAL expression
   15              | expression LT expression
   16              | expression GT expression
   17              | expression

   18 expression: term PLUS term
   19           | term MINUS term
   20           | term OR term
   21           | term CONCAT term
   22           | term

   23 term: factor
   24     | factor MULT factor
   25     | factor DIV factor
   26     | factor AND factor

   27 factor: INT
   28       | STR
   29       | IDENTIFIER
   30       | funccall
   31       | PLUS factor
   32       | MINUS factor
   33       | NOT factor
   34       | READ OPEN_PAR CLOSE_PAR
   35       | OPEN_PAR relexpression CLOSE_PAR

   36 assignment: TYPE IDENTIFIER EQ relexpression

   37 print: PRINT OPEN_PAR relexpression CLOSE_PAR

   38 if: IF OPEN_PAR relexpression CLOSE_PAR block else

   39 while: WHILE OPEN_PAR relexpression CLOSE_PAR block

   40 else: ELSE block
   41     | SEMICOLON

   42 vardec: TYPE IDENTIFIER
   43       | COMMA TYPE IDENTIFIER

   44 block: OPEN_BRACKET statement CLOSE_BRACKET

   45 funccall: IDENTIFIER OPEN_PAR TYPE IDENTIFIER CLOSE_PAR


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 2 29 36 42 43 45
    INT (259) 27
    STR (260) 28
    FN (261) 2
    EQ (262) 36
    LT (263) 15
    GT (264) 16
    NOT (265) 33
    AND (266) 26
    OR (267) 20
    ISEQUAL (268) 14
    OPEN_PAR (269) 2 34 35 37 38 39 45
    CLOSE_PAR (270) 2 34 35 37 38 39 45
    OPEN_BRACKET (271) 4 5 44
    CLOSE_BRACKET (272) 4 5 44
    SEMICOLON (273) 13 41
    PRINT (274) 37
    READ (275) 34
    WHILE (276) 39
    IF (277) 38
    ELSE (278) 40
    TYPE (279) 2 36 42 43 45
    RETURN (280) 4
    CONCAT (281) 21
    COMMA (282) 43
    PLUS (283) 18 31
    MINUS (284) 19 32
    MULT (285) 24
    DIV (286) 25


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    funcdec (34)
        on left: 2 3
        on right: 1 7
    funcbody (35)
        on left: 4 5
        on right: 2
    statement (36)
        on left: 6 7 8 9 10 11 12 13
        on right: 4 5 44
    relexpression (37)
        on left: 14 15 16 17
        on right: 35 36 37 38 39
    expression (38)
        on left: 18 19 20 21 22
        on right: 4 14 15 16 17
    term (39)
        on left: 23 24 25 26
        on right: 18 19 20 21 22
    factor (40)
        on left: 27 28 29 30 31 32 33 34 35
        on right: 23 24 25 26 31 32 33
    assignment (41)
        on left: 36
        on right: 9
    print (42)
        on left: 37
        on right: 13
    if (43)
        on left: 38
        on right: 12
    while (44)
        on left: 39
        on right: 11
    else (45)
        on left: 40 41
        on right: 38
    vardec (46)
        on left: 42 43
        on right: 6
    block (47)
        on left: 44
        on right: 10 38 39 40
    funccall (48)
        on left: 45
        on right: 8 30


State 0

    0 $accept: • program $end

    FN  shift, and go to state 1

    $default  reduce using rule 3 (funcdec)

    program  go to state 2
    funcdec  go to state 3


State 1

    2 funcdec: FN • IDENTIFIER OPEN_PAR TYPE IDENTIFIER CLOSE_PAR funcbody

    IDENTIFIER  shift, and go to state 4


State 2

    0 $accept: program • $end

    $end  shift, and go to state 5


State 3

    1 program: funcdec •

    $default  reduce using rule 1 (program)


State 4

    2 funcdec: FN IDENTIFIER • OPEN_PAR TYPE IDENTIFIER CLOSE_PAR funcbody

    OPEN_PAR  shift, and go to state 6


State 5

    0 $accept: program $end •

    $default  accept


State 6

    2 funcdec: FN IDENTIFIER OPEN_PAR • TYPE IDENTIFIER CLOSE_PAR funcbody

    TYPE  shift, and go to state 7


State 7

    2 funcdec: FN IDENTIFIER OPEN_PAR TYPE • IDENTIFIER CLOSE_PAR funcbody

    IDENTIFIER  shift, and go to state 8


State 8

    2 funcdec: FN IDENTIFIER OPEN_PAR TYPE IDENTIFIER • CLOSE_PAR funcbody

    CLOSE_PAR  shift, and go to state 9


State 9

    2 funcdec: FN IDENTIFIER OPEN_PAR TYPE IDENTIFIER CLOSE_PAR • funcbody

    OPEN_BRACKET  shift, and go to state 10

    funcbody  go to state 11


State 10

    4 funcbody: OPEN_BRACKET • statement RETURN expression CLOSE_BRACKET
    5         | OPEN_BRACKET • statement CLOSE_BRACKET

    IDENTIFIER    shift, and go to state 12
    FN            shift, and go to state 1
    OPEN_BRACKET  shift, and go to state 13
    PRINT         shift, and go to state 14
    WHILE         shift, and go to state 15
    IF            shift, and go to state 16
    TYPE          shift, and go to state 17
    COMMA         shift, and go to state 18

    $default  reduce using rule 3 (funcdec)

    funcdec     go to state 19
    statement   go to state 20
    assignment  go to state 21
    print       go to state 22
    if          go to state 23
    while       go to state 24
    vardec      go to state 25
    block       go to state 26
    funccall    go to state 27


State 11

    2 funcdec: FN IDENTIFIER OPEN_PAR TYPE IDENTIFIER CLOSE_PAR funcbody •

    $default  reduce using rule 2 (funcdec)


State 12

   45 funccall: IDENTIFIER • OPEN_PAR TYPE IDENTIFIER CLOSE_PAR

    OPEN_PAR  shift, and go to state 28


State 13

   44 block: OPEN_BRACKET • statement CLOSE_BRACKET

    IDENTIFIER    shift, and go to state 12
    FN            shift, and go to state 1
    OPEN_BRACKET  shift, and go to state 13
    PRINT         shift, and go to state 14
    WHILE         shift, and go to state 15
    IF            shift, and go to state 16
    TYPE          shift, and go to state 17
    COMMA         shift, and go to state 18

    $default  reduce using rule 3 (funcdec)

    funcdec     go to state 19
    statement   go to state 29
    assignment  go to state 21
    print       go to state 22
    if          go to state 23
    while       go to state 24
    vardec      go to state 25
    block       go to state 26
    funccall    go to state 27


State 14

   37 print: PRINT • OPEN_PAR relexpression CLOSE_PAR

    OPEN_PAR  shift, and go to state 30


State 15

   39 while: WHILE • OPEN_PAR relexpression CLOSE_PAR block

    OPEN_PAR  shift, and go to state 31


State 16

   38 if: IF • OPEN_PAR relexpression CLOSE_PAR block else

    OPEN_PAR  shift, and go to state 32


State 17

   36 assignment: TYPE • IDENTIFIER EQ relexpression
   42 vardec: TYPE • IDENTIFIER

    IDENTIFIER  shift, and go to state 33


State 18

   43 vardec: COMMA • TYPE IDENTIFIER

    TYPE  shift, and go to state 34


State 19

    7 statement: funcdec •

    $default  reduce using rule 7 (statement)


State 20

    4 funcbody: OPEN_BRACKET statement • RETURN expression CLOSE_BRACKET
    5         | OPEN_BRACKET statement • CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 35
    RETURN         shift, and go to state 36


State 21

    9 statement: assignment •

    $default  reduce using rule 9 (statement)


State 22

   13 statement: print • SEMICOLON

    SEMICOLON  shift, and go to state 37


State 23

   12 statement: if •

    $default  reduce using rule 12 (statement)


State 24

   11 statement: while •

    $default  reduce using rule 11 (statement)


State 25

    6 statement: vardec •

    $default  reduce using rule 6 (statement)


State 26

   10 statement: block •

    $default  reduce using rule 10 (statement)


State 27

    8 statement: funccall •

    $default  reduce using rule 8 (statement)


State 28

   45 funccall: IDENTIFIER OPEN_PAR • TYPE IDENTIFIER CLOSE_PAR

    TYPE  shift, and go to state 38


State 29

   44 block: OPEN_BRACKET statement • CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 39


State 30

   37 print: PRINT OPEN_PAR • relexpression CLOSE_PAR

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    relexpression  go to state 48
    expression     go to state 49
    term           go to state 50
    factor         go to state 51
    funccall       go to state 52


State 31

   39 while: WHILE OPEN_PAR • relexpression CLOSE_PAR block

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    relexpression  go to state 53
    expression     go to state 49
    term           go to state 50
    factor         go to state 51
    funccall       go to state 52


State 32

   38 if: IF OPEN_PAR • relexpression CLOSE_PAR block else

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    relexpression  go to state 54
    expression     go to state 49
    term           go to state 50
    factor         go to state 51
    funccall       go to state 52


State 33

   36 assignment: TYPE IDENTIFIER • EQ relexpression
   42 vardec: TYPE IDENTIFIER •

    EQ  shift, and go to state 55

    $default  reduce using rule 42 (vardec)


State 34

   43 vardec: COMMA TYPE • IDENTIFIER

    IDENTIFIER  shift, and go to state 56


State 35

    5 funcbody: OPEN_BRACKET statement CLOSE_BRACKET •

    $default  reduce using rule 5 (funcbody)


State 36

    4 funcbody: OPEN_BRACKET statement RETURN • expression CLOSE_BRACKET

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    expression  go to state 57
    term        go to state 50
    factor      go to state 51
    funccall    go to state 52


State 37

   13 statement: print SEMICOLON •

    $default  reduce using rule 13 (statement)


State 38

   45 funccall: IDENTIFIER OPEN_PAR TYPE • IDENTIFIER CLOSE_PAR

    IDENTIFIER  shift, and go to state 58


State 39

   44 block: OPEN_BRACKET statement CLOSE_BRACKET •

    $default  reduce using rule 44 (block)


State 40

   29 factor: IDENTIFIER •
   45 funccall: IDENTIFIER • OPEN_PAR TYPE IDENTIFIER CLOSE_PAR

    OPEN_PAR  shift, and go to state 28

    $default  reduce using rule 29 (factor)


State 41

   27 factor: INT •

    $default  reduce using rule 27 (factor)


State 42

   28 factor: STR •

    $default  reduce using rule 28 (factor)


State 43

   33 factor: NOT • factor

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    factor    go to state 59
    funccall  go to state 52


State 44

   35 factor: OPEN_PAR • relexpression CLOSE_PAR

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    relexpression  go to state 60
    expression     go to state 49
    term           go to state 50
    factor         go to state 51
    funccall       go to state 52


State 45

   34 factor: READ • OPEN_PAR CLOSE_PAR

    OPEN_PAR  shift, and go to state 61


State 46

   31 factor: PLUS • factor

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    factor    go to state 62
    funccall  go to state 52


State 47

   32 factor: MINUS • factor

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    factor    go to state 63
    funccall  go to state 52


State 48

   37 print: PRINT OPEN_PAR relexpression • CLOSE_PAR

    CLOSE_PAR  shift, and go to state 64


State 49

   14 relexpression: expression • ISEQUAL expression
   15              | expression • LT expression
   16              | expression • GT expression
   17              | expression •

    LT       shift, and go to state 65
    GT       shift, and go to state 66
    ISEQUAL  shift, and go to state 67

    $default  reduce using rule 17 (relexpression)


State 50

   18 expression: term • PLUS term
   19           | term • MINUS term
   20           | term • OR term
   21           | term • CONCAT term
   22           | term •

    OR      shift, and go to state 68
    CONCAT  shift, and go to state 69
    PLUS    shift, and go to state 70
    MINUS   shift, and go to state 71

    $default  reduce using rule 22 (expression)


State 51

   23 term: factor •
   24     | factor • MULT factor
   25     | factor • DIV factor
   26     | factor • AND factor

    AND   shift, and go to state 72
    MULT  shift, and go to state 73
    DIV   shift, and go to state 74

    $default  reduce using rule 23 (term)


State 52

   30 factor: funccall •

    $default  reduce using rule 30 (factor)


State 53

   39 while: WHILE OPEN_PAR relexpression • CLOSE_PAR block

    CLOSE_PAR  shift, and go to state 75


State 54

   38 if: IF OPEN_PAR relexpression • CLOSE_PAR block else

    CLOSE_PAR  shift, and go to state 76


State 55

   36 assignment: TYPE IDENTIFIER EQ • relexpression

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    relexpression  go to state 77
    expression     go to state 49
    term           go to state 50
    factor         go to state 51
    funccall       go to state 52


State 56

   43 vardec: COMMA TYPE IDENTIFIER •

    $default  reduce using rule 43 (vardec)


State 57

    4 funcbody: OPEN_BRACKET statement RETURN expression • CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 78


State 58

   45 funccall: IDENTIFIER OPEN_PAR TYPE IDENTIFIER • CLOSE_PAR

    CLOSE_PAR  shift, and go to state 79


State 59

   33 factor: NOT factor •

    $default  reduce using rule 33 (factor)


State 60

   35 factor: OPEN_PAR relexpression • CLOSE_PAR

    CLOSE_PAR  shift, and go to state 80


State 61

   34 factor: READ OPEN_PAR • CLOSE_PAR

    CLOSE_PAR  shift, and go to state 81


State 62

   31 factor: PLUS factor •

    $default  reduce using rule 31 (factor)


State 63

   32 factor: MINUS factor •

    $default  reduce using rule 32 (factor)


State 64

   37 print: PRINT OPEN_PAR relexpression CLOSE_PAR •

    $default  reduce using rule 37 (print)


State 65

   15 relexpression: expression LT • expression

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    expression  go to state 82
    term        go to state 50
    factor      go to state 51
    funccall    go to state 52


State 66

   16 relexpression: expression GT • expression

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    expression  go to state 83
    term        go to state 50
    factor      go to state 51
    funccall    go to state 52


State 67

   14 relexpression: expression ISEQUAL • expression

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    expression  go to state 84
    term        go to state 50
    factor      go to state 51
    funccall    go to state 52


State 68

   20 expression: term OR • term

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    term      go to state 85
    factor    go to state 51
    funccall  go to state 52


State 69

   21 expression: term CONCAT • term

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    term      go to state 86
    factor    go to state 51
    funccall  go to state 52


State 70

   18 expression: term PLUS • term

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    term      go to state 87
    factor    go to state 51
    funccall  go to state 52


State 71

   19 expression: term MINUS • term

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    term      go to state 88
    factor    go to state 51
    funccall  go to state 52


State 72

   26 term: factor AND • factor

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    factor    go to state 89
    funccall  go to state 52


State 73

   24 term: factor MULT • factor

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    factor    go to state 90
    funccall  go to state 52


State 74

   25 term: factor DIV • factor

    IDENTIFIER  shift, and go to state 40
    INT         shift, and go to state 41
    STR         shift, and go to state 42
    NOT         shift, and go to state 43
    OPEN_PAR    shift, and go to state 44
    READ        shift, and go to state 45
    PLUS        shift, and go to state 46
    MINUS       shift, and go to state 47

    factor    go to state 91
    funccall  go to state 52


State 75

   39 while: WHILE OPEN_PAR relexpression CLOSE_PAR • block

    OPEN_BRACKET  shift, and go to state 13

    block  go to state 92


State 76

   38 if: IF OPEN_PAR relexpression CLOSE_PAR • block else

    OPEN_BRACKET  shift, and go to state 13

    block  go to state 93


State 77

   36 assignment: TYPE IDENTIFIER EQ relexpression •

    $default  reduce using rule 36 (assignment)


State 78

    4 funcbody: OPEN_BRACKET statement RETURN expression CLOSE_BRACKET •

    $default  reduce using rule 4 (funcbody)


State 79

   45 funccall: IDENTIFIER OPEN_PAR TYPE IDENTIFIER CLOSE_PAR •

    $default  reduce using rule 45 (funccall)


State 80

   35 factor: OPEN_PAR relexpression CLOSE_PAR •

    $default  reduce using rule 35 (factor)


State 81

   34 factor: READ OPEN_PAR CLOSE_PAR •

    $default  reduce using rule 34 (factor)


State 82

   15 relexpression: expression LT expression •

    $default  reduce using rule 15 (relexpression)


State 83

   16 relexpression: expression GT expression •

    $default  reduce using rule 16 (relexpression)


State 84

   14 relexpression: expression ISEQUAL expression •

    $default  reduce using rule 14 (relexpression)


State 85

   20 expression: term OR term •

    $default  reduce using rule 20 (expression)


State 86

   21 expression: term CONCAT term •

    $default  reduce using rule 21 (expression)


State 87

   18 expression: term PLUS term •

    $default  reduce using rule 18 (expression)


State 88

   19 expression: term MINUS term •

    $default  reduce using rule 19 (expression)


State 89

   26 term: factor AND factor •

    $default  reduce using rule 26 (term)


State 90

   24 term: factor MULT factor •

    $default  reduce using rule 24 (term)


State 91

   25 term: factor DIV factor •

    $default  reduce using rule 25 (term)


State 92

   39 while: WHILE OPEN_PAR relexpression CLOSE_PAR block •

    $default  reduce using rule 39 (while)


State 93

   38 if: IF OPEN_PAR relexpression CLOSE_PAR block • else

    SEMICOLON  shift, and go to state 94
    ELSE       shift, and go to state 95

    else  go to state 96


State 94

   41 else: SEMICOLON •

    $default  reduce using rule 41 (else)


State 95

   40 else: ELSE • block

    OPEN_BRACKET  shift, and go to state 13

    block  go to state 97


State 96

   38 if: IF OPEN_PAR relexpression CLOSE_PAR block else •

    $default  reduce using rule 38 (if)


State 97

   40 else: ELSE block •

    $default  reduce using rule 40 (else)
